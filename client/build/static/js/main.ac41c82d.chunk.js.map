{"version":3,"sources":["components/DeleteButton.js","components/PetList.js","views/Main.js","components/PetForm.js","views/NewPet.js","views/Update.js","views/Detail.js","App.js","serviceWorker.js","index.js"],"names":["props","petId","successCallback","onClick","e","axios","delete","then","res","useState","pets","setPets","useEffect","get","data","map","pet","idx","key","name","type","to","_id","DeleteButton","filter","p","loaded","setLoaded","PetList","removeFromDom","a","initialName","initialType","initialDescription","initialSkill1","initialSkill2","initialSkill3","onSubmitProp","setName","setType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","onSubmit","preventDefault","alert","length","navigate","value","onChange","target","errors","setErrors","err","index","PetForm","post","console","log","catch","errorResponse","response","errorArr","Object","keys","push","message","id","setPet","put","App","className","Main","path","NewPet","Update","Detail","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.ac41c82d.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios';\nexport default props => {\n    const { petId, successCallback } = props;\n    const deletePet = e => {\n        axios.delete('http://localhost:8000/api/pet/' + petId)\n            .then(res=>{\n                successCallback();\n            })\n    }\n    return (\n        <button onClick={deletePet}>\n            Adopt (del)\n        </button>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Link } from '@reach/router';\nimport axios from 'axios';\nimport DeleteButton from './DeleteButton';\nexport default props => {\n    const [pets, setPets] = useState([]);\n    useEffect(() => {\n        axios.get('http://localhost:8000/api/pets')\n            .then(res => setPets(res.data));\n    }, [])\n    const removeFromDom = petId => {\n        setPets(pets.filter(p => p._id !== petId))\n    }\n    return (\n        <div>\n            <table>\n                <tr>\n                    <th>Name</th>\n                    <th>Type</th>\n                    <th>Actions </th>\n                </tr>\n                {pets.map((pet, idx) => {\n                                return (\n                                    <tr key={idx}>\n                                        <td >\n                                            \n                                                {pet.name}\n                                           \n                                        </td>\n                                        <td>\n                                            {pet.type}\n                                        </td>\n                                        <td>\n                                            <Link to={\"/pet/\" + pet._id}>\n                                                details\n                                            </Link> |\n                                            <Link to={\"/pets/\" + pet._id + \"/edit\"}>\n                                                Edit\n                                            </Link> |\n                                            <DeleteButton petId={pet._id} successCallback={()=>removeFromDom(pet._id)}/>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n            </table>\n           \n        </div>\n    )\n}\n","\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link } from '@reach/router';\n\nimport PetList from '../components/PetList';\nexport default () => {\n    const [pets, setPets] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    useEffect(() => { \n        axios.get('http://localhost:8000/api/pets')\n            .then(res =>{ \n                setPets(res.data)\n                setLoaded(true);\n\n            });\n    }, [])\n    const removeFromDom = petId => {\n        setPets(pets.filter(a => a._id !== petId));\n    }\n   \n    return (\n        <div>\n\n           <h1>Pet Shelter</h1>\n           <h4>These pets are looking for a good home</h4>\n            <Link to={\"/pet\"}>Add an pet to the shelter</Link>\n            <hr/>\n           \n           {loaded && <PetList pets={pets} removeFromDom={removeFromDom}/>}\n        </div>\n    )\n}\n","import React, {  useState } from 'react'\nimport { navigate } from '@reach/router';\nimport axios from 'axios';\n\nexport default props => {\n    const { initialName,initialType,initialDescription,initialSkill1,initialSkill2,initialSkill3 ,onSubmitProp } = props;\n    const [name, setName] = useState(initialName);\n    const [type, setType] = useState(initialType);\n    const [description, setDescription] = useState(initialDescription);\n    const [skill1, setSkill1] = useState(initialSkill1);\n    const [skill2, setSkill2] = useState(initialSkill2);\n    const [skill3, setSkill3] = useState(initialSkill3);\n    \n    const onSubmitHandler = e => {\n        e.preventDefault();\n\n        axios.get('http://localhost:8000/api/petbyname/' + name)\n            .then(res => {\n                \n                if(res.data !== null){\n                    alert(\"another pet has the same name\")\n                }else if(name.length < 3  ) {\n                    alert(\"name must be at least 3 characters\")\n                }else if(type.length < 3) {\n                    alert(\"type  must be at least 3 characters\")\n                }else if(description.length < 3) {\n                    alert(\"description  must be at least 3 characters\")\n                }else{\n                    onSubmitProp({name,type,description,skill1,skill2,skill3});\n                    navigate(\"/\")\n        }\n            })\n\n\n\n\n\n\n\n        \n\n\n       \n        \n    }\n        \n    return (\n        <form onSubmit={onSubmitHandler}>\n\n            <p>\n                <label> Pet Name</label><br />\n                <input \n                    type=\"text\" \n                    name=\"name\" value={name} \n                    onChange={(e) => { setName(e.target.value) }} />\n            </p>\n            \n            <p>\n                <label> Pet Type</label><br />\n                <input \n                    type=\"text\" \n                    name=\"type\" value={type} \n                    onChange={(e) => { setType(e.target.value) }} />\n            </p>\n\n            <p>\n                <label> Pet Description</label><br />\n                <input \n                    type=\"text\" \n                    name=\"description\" value={description} \n                    onChange={(e) => { setDescription(e.target.value) }} />\n            </p>\n            <h5>Skills (optional) :</h5>        \n            <p>\n                <label> Skill 1</label><br />\n                <input \n                    type=\"text\" \n                    name=\"skill1\" value={skill1} \n                    onChange={(e) => { setSkill1(e.target.value) }} />\n            </p>\n            <p>\n                <label> Skill 2</label><br />\n                <input \n                    type=\"text\" \n                    name=\"skill2\" value={skill2} \n                    onChange={(e) => { setSkill2(e.target.value) }} />\n            </p>\n            <p>\n                <label> Skill 3</label><br />\n                <input \n                    type=\"text\" \n                    name=\"skill3\" value={skill3} \n                    onChange={(e) => { setSkill3(e.target.value) }} />\n            </p>\n           \n            <input type=\"submit\" />\n        </form>\n    )\n}\n","import React,{ useState } from 'react'\nimport axios from 'axios';\nimport PetForm from '../components/PetForm';\nimport { Link } from '@reach/router';\nexport default () => {\n    const [errors, setErrors] = useState([]); \n    \n   \n    const createPet = pet => {\n        axios.post('http://localhost:8000/api/pet', pet)\n            .then(res=>{\n               console.log(res.data)\n            })\n            \n            .catch(err=>{\n                const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n                const errorArr = []; // Define a temp error array to push the messages in\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n                    errorArr.push(errorResponse[key].message)\n                }\n                // Set Errors\n                setErrors(errorArr);\n            })            \n\n\n\n\n\n\n    }\n    return (\n        <div>\n             {errors.map((err, index) => <p key={index}>{err}</p>)}\n            <h1>Pet Shelter</h1>\n            <h5>Know a pet needing a home ?</h5>\n            <Link to={\"/\"}>back to home</Link>\n            <hr/>\n           <PetForm onSubmitProp={createPet} initialName=\"\" />\n           \n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link } from '@reach/router';\nimport PetForm from '../components/PetForm';\n\nexport default props => {\n    const { id } = props;\n    const [pet, setPet] = useState({});\n    const [loaded, setLoaded] = useState(false); \n\n    useEffect(() => { \n        \n        axios.get('http://localhost:8000/api/pet/' + id)\n            .then(res => {\n                \n                setPet(res.data);\n                \n                setLoaded(true);\n            })\n    }, [id])\n    const updatePet = pet => {\n        axios.put('http://localhost:8000/api/pet/' + id, pet)\n            .then(res => console.log(res));\n    }\n    return (\n        <div>\n            <h1>Pet Shelter</h1>\n            <h5>Edit {pet.name}</h5>\n            \n            <Link to={\"/\"}>back to home</Link>\n            <hr/>\n            {loaded && (\n                \n                    <PetForm\n                        onSubmitProp={updatePet}\n                        initialName={pet.name}\n                        initialType = {pet.type}\n                        initialDescription = {pet.description}\n                        initialSkill1 = {pet.skill1}\n                        initialSkill2 = {pet.skill2}\n                        initialSkill3 = {pet.skill3}\n                    />\n                    \n                \n            )}\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { navigate,Link } from '@reach/router';\nimport DeleteButton from '../components/DeleteButton';\nexport default props => {\n    const [pet, setPet] = useState({})\n    useEffect(() => {\n        axios.get(\"http://localhost:8000/api/pet/\" + props.id)\n            .then(res => setPet({\n                ...res.data\n            }))\n    }, [props.id])\n    return (\n        <div>\n            <h1>Pet Shelter</h1>\n            <h4>Details {pet.name}     <DeleteButton petId={pet._id} successCallback={() => navigate(\"/\")}/></h4>\n            \n            <Link to={\"/\"}>back to home</Link>\n            <hr/>\n            <p> Pet type: {pet.type}</p>\n            <p>Description : {pet.description}</p>\n            <p>\n               Skills:\n            </p>\n            <p>{pet.skill1}</p>\n            <p>{pet.skill2}</p>\n            <p>{pet.skill3}</p>\n            \n        </div>\n    )\n}\n","import React from 'react';\n\nimport './App.css';\nimport { Router } from '@reach/router';\nimport Main from './views/Main';\nimport NewPet from './views/NewPet';\nimport Update from './views/Update'\nimport Detail from './views/Detail'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Main path=\"/\"/>\n        <NewPet path=\"pet/\"/>\n        <Update path=\"pets/:id/edit\"/>\n        <Detail path=\"pet/:id\"/>\n\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}